Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
precision highp float;

out vec4 fragmentColor;
in vec2 texCoord; // pass this on from vertex shader
in vec4 worldPos; 
in vec3 worldNormal;
in vec3 color;

// we need to bind texture to this
uniform sampler2D colorTexture;
uniform vec4 lightPos[8]; // xyz is the direction, w is 0. If w is 1, then it is a point light 
uniform vec4 lightPowerDensity[8];
uniform vec3 eyePosition;
uniform vec3 shadowColor;

vec4 lightSource;

float shininess;


void main(void) {
  vec3 textureColor = (texture(colorTexture, texCoord)).rgb;
  vec3 normal = normalize(worldNormal);

  vec3 viewDirection = normalize(eyePosition.xyz - worldPos.xyz);

  shininess = 50.0;

   //For Sunshine: directional light 
  vec3 lightDirectionGeneral = vec3(0.5,2.2,0);

  float lightProduct = max(dot(normal, lightDirectionGeneral),0.0);
  fragmentColor = vec4(textureColor * lightProduct,1);

  

 //For tecturne of falling: lambertian shading  
     int i = 0; {
       vec3 lightDirection = lightPos[i].xyz;
       fragmentColor = fragmentColor +  vec4(lightPowerDensity[i].rgb * textureColor * max(dot(normal, lightDirection),0.0),1); 
       }


      i=2; {
      //For Phong-Blinn shading 
       vec3 specularColor = vec3(1,1,1);
       vec3 halfway = normalize(viewDirection + lightPos[i].xyz);
       vec3 lightDirection1 = lightPos[i].xyz;
       fragmentColor =  fragmentColor + vec4(lightPowerDensity[i].rgb  * specularColor * pow(max(dot(normal,halfway),0.0) ,shininess), 1);
       fragmentColor.rgb = fragmentColor.rgb * shadowColor;}
       
      
}

`;