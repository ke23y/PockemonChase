Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
precision highp float;

out vec4 fragmentColor;
in vec2 texCoord; // pass this on from vertex shader
in vec4 worldPos; 
in vec3 worldNormal;
in vec3 color;

// we need to bind texture to this
uniform sampler2D colorTexture;
uniform vec4 lightPos[8]; // xyz is the direction, w is 0. If w is 1, then it is a point light 
uniform vec4 lightPowerDensity[8];
uniform vec3 eyePosition;

vec4 lightSource;

float shininess;
vec3 specularColor = vec3(0.5,1,1);

void main(void) {
  vec3 textureColor = vec3((texture(colorTexture, 0.1*(worldPos.xz/worldPos.w))).rgb);
  vec3 normal = normalize(worldNormal);

  vec3 viewDirection = normalize(eyePosition.xyz - worldPos.xyz);

  shininess = 15.0;

  
  //For Sunshine: directional light 
  vec3 lightDirectionGeneral = vec3(0,0.9,1.3);

  float lightProduct = dot(normal, lightDirectionGeneral);
  fragmentColor = vec4(textureColor * lightProduct,1);


  //Loop through light Position 
  for (int i =0; i<3; i++) {
     //For tecturne of falling: lambertian shading  
     if (i == 0) {
       vec3 lightDirection = lightPos[i].xyz;
       fragmentColor = fragmentColor +  vec4(lightPowerDensity[i].rgb * textureColor * max(dot(normal, lightDirection),0.0),1);

     }



  } 


}
`;